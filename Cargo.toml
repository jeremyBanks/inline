[package]
description = "üóëÔ∏è litter makes your literals mutable with smart pointers into your source code"
edition = "2021"
license = "MIT OR Apache-2.0"
name = "litter"
version = "0.20220716.0-WIP-DO-NOT-USE-OR-YOU-WILL-BE-FIRED-AND-I-WILL-BE-FIRED-YIKES"

[dependencies]
arbitrary = { version = "1.1.3", optional = true }
derive_more = "0.99.17"
document-features = "0.2.1"
env_logger = { version = "0.9.0", optional = true }
log = "0.4.17"
miette = { version = "5.1.1", optional = true }
once_cell = { version = "1.13.0", optional = true, default-features = false }
parking_lot = { version = "0.12.1", optional = true, features = ["send_guard"] }
postcard = { version = "1.0.0", optional = true, default-features = false }
proc-macro0 = { version = "1.0.40-dev.0", optional = true }
serde = { version = "1.0.139", optional = true, default-features = false }
serde_json = { version = "1.0.82", optional = true }
serde_yaml = { version = "0.8.25", optional = true }
thiserror = "1.0.31"
toml = { version = "0.5.9", optional = true }

[dev-dependencies]
litter = { path = ".", default-features = false, features = ["dev-dependencies"] }

[package.metadata.docs.rs]
all-features = true
cargo-args = ["-Zunstable-options", "-Zrustdoc-scrape-examples=all"]

[features]
#! ## Feature Flags

#- We omit the serialization features by default.
default = ["mut", "write", "panic"]

#- Features and dependencies activated for `dev-dependencies`.
#- (See https://stackoverflow.com/q/73015087/1114.)
dev-dependencies = [
    "serde/derive",
    "miette/fancy",
    "env_logger",
    "arbitrary/derive",
]

#! ### Serialization Formats

## Support (de)serializing string/byte literals as JSON using `serde` via the `.edit_json()` methods.
json = ["serde", "std", "serde_json"]

## Support (de)serializing byte literals as Postcard using `serde` via the `.edit_postcard()` methods.
postcard = ["serde", "dep:postcard"]

## Support (de)serializing string/byte literals as TOML using `serde` via the `.edit_toml()` methods.
toml = ["serde", "std", "dep:toml"]

## Support (de)serializing string/byte literals as YAML using `serde` via the `.edit_yaml()` methods.
yaml = ["serde", "std", "serde_yaml"]

#! ### Core Capabilities

## Support for writing literal mutations back to their source file.
write = ["mut", "proc-macro0"]

## Support for "mutating" literals.
mut = ["std", "parking_lot", "once_cell/parking_lot"]

## Include features that may panic on error. (This does **not** prevent all panics (yet?).)
panic = []

#- Include features that require `serde`.
serde = ["dep:serde"]

#- Include features that require the built-in `std` module (operating system bindings).
std = ["alloc", "serde?/std", "postcard?/use-std", "once_cell?/std"]

#- Include features that require the built-in `alloc` module (memory allocation).
alloc = ["postcard?/alloc", "once_cell?/alloc"]

#- Internal pseudo feature to be activated by `--all-features`.
__all_features__ = []

#! ### Forbidding Features
#!
#! These flags are obviously "non-additive" (contra [the normal recommendation][1]),
#! so they should typically only be activated by the root binary, not libraries.
#! These don't disable the corresponding features directly; you'll still need to use `default-features = false`.
#! Rather, these flags will raise a compile errors if the corresponding features are enabled,
#! to help catch cases where they may inadvertently be reenabled by other crates.
#! These flags are ignored in `--all-features` builds.
#!
#! [1]: https://doc.rust-lang.org/cargo/reference/features.html#feature-unification

## Forbids the use of the `panic` feature.
forbid-panic = []

## Forbids the use of the `write` feature.
forbid-write = []

## Forbids the use of the `mut` feature.
forbid-mut = []

## Forbids the use of features that require `serde`.
forbid-serde = []
